
取指，对应的硬件叫取指器
解码，对应的硬件叫解码器
执行，最终由CPU执行



回顾：
1.Nand相关内容
  作用：存储数据
  比较对象：NorFlash 
  内部特性：
  	页
  	块
  	行地址
  	列地址
  硬件连接：
  	14根信号线
  		画出简要的连接图
  操作步骤：
  	命令
  	地址
  	数据
  		画出操作时序图(画出CPU读取Nand ID信息的时序图)
  软件编程：
  	研究对象转移：
  	CPU操作Nand芯片
  	CPU操作14根信号线
  	CPU操作Nand控制器
  		以上三步骤,将来由硬件自动完成！
  	CPU操作寄存器(控制器)：软件编程,结合CPU的芯片手册和Nand的芯片手册
  		画出硬件操作框图
  	
  	软件编程的方法：
  	1.CPU绕开Nand控制器,直接采用GPIO模拟Nand时序
  	2.CPU直接操作控制器对应的寄存器,将来控制器硬件
  	  自动发起Nand时序	
  	3.对比：
  	  方法1：虽然能够实现对Nand芯片的访问,但是效率极其低下
  	  	 但是对Nand的访问过程极其之明确
  	  方法2：访问Nand效率势必高效,但是访问过程比较朦胧
  切记：嵌入式软件开发,只要涉及硬件外设的操作,必须要看硬件外设的
        操作时序图！这才是王道！
        将来可以通过示波器抓取时序图,做进一步的分析
        
案例：用户需求读取Nand一页的数据信息,并且打印数据信息
      分析：
      1.掌握Nand读的时序图P27
      2.提示将读取的数据放到内存的0x20018000地址空间
      
案例：用户需求能够擦除Nand一块数据信息
      时序图：P32
      
案例：用户需求向Nand写一页的数据
      时序图：P29

面试题：谈谈对UART的认识
其中必须画出UART的时序操作图
以CPU通过UART发送0x95数据为例,并且UART的工作参数115200,8e1

********************************************************	  
2.面试题：谈谈对ARM处理器的理解
1.ARM概念
  1.1.既可以认为是一家公司,ARM公司,设计和卖IP授权,不生产具体处理器
  也可以认为是一种处理器架构,类似X86架构
  
  1.2.常见生产ARM处理器的芯片厂家 ：
  华为海思
  全志
  联芯
  联发科(MTK)
  英伟达
  三星：消费类电子
  飞思卡尔：军工,汽车电子
  TI(德州仪器)：达芬奇系列,OMAP系列  	
  ATMEL:工控
  高通：消费类电子
  博通：网络功能相当强悍！树莓派
  
  1.3.其余特性
  1.ARM架构采用RISC设计思想
    RISC:精简指令集,ARM
    CISC:复杂指令集,X86
    前者是硬件做的事比较少,软件做的事比较多
    后者是硬件做的事比较多,软件做的事比较少
  
  2.ARM核版本的划分
    明确：ARM核仅仅指CPU核,不包括外设(寄存器,控制器等)
          由ARM公司设计
    ARM核大版本        ARM核小版本      具体处理器(芯片厂家)
     ARMV4             ARM7		S3C4510(三星)
     		       ARM9		at91rm9200(Atmel)
     ARMV5	       ARM10		S3C6410(三星)
     		       XScale		pxa270(intel)
     		       
     ARMV6	       ARM11		MSM7200(高通)
     ARMV7	       CORTEX-A8	S5PV210(三星)
     		       CORTEX-M3	STM32(ST)
     		      
     ARMV8(支持64位)   CORTEX-A53       MTK6732(联发科,4核)
		       CORTEX-A73
     
   3.ARM7核特性
     3级流水线
     冯.诺伊曼：地址数据共用,处理时需要进行区分,ARM7
     哈弗：地址数据分开,ARM9以后
   
   4.ARM 3级指令流水线
     明确：
     	“指令”：给CPU下达的动作指令(二进制)
     	“流水线”：提高CPU处理指令的效率
     	"3级指令流水线":CPU相应指令需要经过3步骤
     	                类似生产电视机的流水线
     	指令就相当于电视机
     	指令最终让CPU得到执行需要经过三个硬件,三步骤去完成：
     	第一步骤：取指,对应的硬件叫取指器,类似电视机组装
     	第二步骤：解码,对应的硬件叫解码器,类似电视机包装
     	第三步骤：执行,最终由CPU执行,类似电视机搬移
       	
       	说明：
       	取指：取值器将指令(二进制代码)由内存拷贝到CPU
       	解码：解码器将指令最终翻译成CPU能够识别的语言
       	执行：结果取指,解码以后,CPU最终执行
       	注意：以上三个硬件都是在CPU核内部
       	切记：ARM核里面由一个寄存器,叫PC,永远保存取指指令的地址
       	注意：寄存器分类：
       	一类是特殊功能寄存器,就是之前咱们编程时使用的控制器
       	内部的一大堆寄存器,这些寄存器的访问必须以地址指针的
       	形式访问；
       	另一类寄存器又称ARM寄存器,这些寄存器仅仅存在于ARM核
       	内部(例如pc),访问无需通过地址指针的形式访问,通过名字
       	来访问
       	
       	注意：画出3级流水线的处理示意图

最佳流水线
cycle      	 123456789
operation     
ADD	       FDE	
SUB		FDE
ORR		 FDE
AND		  FDE
ORR                FDE
EOR		    FDE

LDR三级流水线
cycle		  123456789
operation         
ADD		FDE
SUB		 FDE
LDR		  FDEMW
AND		   FDSSE
ORR		    FSSDE
EOR		       FDE

       	
     5.3级流水线的特例
       LDR指令功能：cpu根据这个指令,将内存中的数据拷贝到CPU核中
       		    但是LDR指令不是3级流水线,而是5级流水线
       		    F(取值)->D(解码)->E(执行)->M(访存,访问内存地址)->W(如果地址ok,将地址存储空间中的数据拷贝到CPU核中)writeback
       		    LDR指令执行时,在M和W阶段,后序两条指令将处于等待状态
       bl指令功能：跳转指令,CPU根据这条指令能够跳转到某个
       		   地方去"执行"(取值,解码,执行),同样经过5级流水线：
       		   F(取值)->D(解码)->E(执行)->L(跳转)->A(保存返回地址)
       		   同样后序两条指令不会得到处理
       
       中断处理：
       问：何为中断
       答：
       1.中断是计算机一个相当重要的机制
       
       问：为什么有中断机制呢？
       答：明确CPU一天到晚都在跟外设进行数据的通信,由于CPU的
       处理速度远远快于外设,这里存在数据处理的速度不一致的问题
       为了保证CPU能够正常和外设进行数据通信,一种最简单的办法就是
       CPU轮询(死等)获取外设的数据,采用轮询可以保证数据正确，但是
       相当耗费CPU资源,大大降低了CPU的利用率,因为CPU不能干其他的事情
       只能死等死读这个外设！
       此时此刻可以采用中断机制来解决此类问题,这里以CPU读取
       UART数据为例,当CPU读取UART数据时,发现数据没有准备就绪,
       CPU不再轮询读取UART,而是做其他的事情(比如处理一个进程),
       一旦UART准备好数据了,UART会给CPU发送一个中断电信号(嗨,我这边有数了,请来处理)
       CPU一旦接收到了这个中断电信号,会停止手头的工作,转去处理UART
       ,处理UART完毕,CPU继续接着执行原先被打断的事情,在这个过程中
       CPU至少做2件事,大大提高了CPU的利用率！
       
       英文缩写：IRQ
       总结：轮询和中断永远是死对头！
       
       中断的流水线处理：4级：DI->EI->L->A
       
       总结：能够画出3级流水线的示意图即可
             ldr,bl,中断仅作了解即可！
     
   4.ARM9以后的版本一律采用5级流水线
     3级流水线没有把M和W合法化,仅仅是ldr指令才有M和W；
     但是5级流水线的任何一个指令都有M和W,换句话就是任何
     一个指令将M和W合法化！
     
     画出5级流水线的示意图即可！
     复习数组的方括号[]
     a[3] = *(a + 3);
     []运算经过2步骤：
     1.先求地址：a + 3
     2.在从地址中取数据:*(a + 3)

3.ARM编程模型
  3.1.ARM工作模式
  明确：有7中工作模式,CPU同一时刻只能处在一种工作模式下
  分别是：
  SVC管理模式：当系统Reset复位,CPU自动切换到SVC管理模式
               当软件调用svc指令,触发软中断,CPU自动切换到SVC管理模式
               当CPU进入这个模式下,此时CPU的执行权限最高！
               
  FIQ快速中断模式：当外设给CPU发送的中断信号以FIQ发给CPU是
                   CPU一旦接收到这个中断信号,CPU自动切换到
                   FIQ模式
  IRQ中断模式：当外设给CPU发送的中断信号以IRQ发给CPU时
                   CPU一旦接收到这个中断信号,CPU自动切换到
                   IRQ模式
               问：外设的中断信号如何指定为FIQ还是IRQ呢？
               答：通过中断控制器来指定
               
  Abort终止模式：当CPU访问某个非法地址或者访问某个非法数据时
                 CPU自动切换到Abort终止模式
                 
  Undef未定义指令模式：当CPU执行某个CPU不认识的指令时,CPU
  		自动切换到未定义指令模式,例如：CPU执行zhangsan指令
  
  System系统模式：
  User用户模式：
  		以上两个模式是一样的,区别仅仅是权限不一样,
  		前者的权限高于后者,例如：一个程序在运行时
  		一般处于User模式
  
  3.2.ARM的工作状态
  分ARM状态和THumb状态
  当CPU处于ARM状态时,对应的指令为ARM指令,宽度为32位
  当CPU处于THumb状态时,对应的指令为THumb指令,宽度为16位
  注意：一般CPU都是处于ARM状态！
  
  
             