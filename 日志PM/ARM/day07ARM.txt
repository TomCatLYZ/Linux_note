游成伟
15801588497
409025260@qq.com

1.三个要求：
  安装纯linux系统
  	建议：ubuntu,fedora,kali
  	友情提示：备份重要资料,建议安装32位系统
  	
  安装必要的软件
        建议采用网络安装命令：
        	ubuntu安装命令：apt-get install
        	fedora:yum install
        必要安装的软件：以ubuntu为例
        sudo apt-get install vim
        sudo apt-get install minicom kermit //串口工具
        sudo apt-get install tftpd-hpa //tftp网络服务
        sudo apt-get install nfs-kernel-server //nfs网络服务
        sudo apt-get install ctags cscope //源码阅读工具
        sudo apt-get install openssh-server //远程登录软件
        
  注意：遇到问题先搜索,先尝试自己解决！
 
  每天半小时笔试题：MS.rar
  将重复次数多的笔试题摘抄到笔记本上(纸质),务必背下来！
  例如：阐述static作用
  
2.回顾ARM裸板开发相关内容
  面试题：为什么要学嵌入式？
  面试题：谈谈对嵌入式系统的认识？
  面试题：谈谈对嵌入式软件开发的认识？
  
  明确：嵌入式软件开发形式：
  裸板程序开发：
              软件开发框架：
              main(void) {
              	xxx_init(); //各种硬件初始化
                ....	
              	
              	while(1) {
              		处理业务
              	}
              }
              ARM裸板程序开发关键点找到main函数即可！
              
  带操作系统的程序开发：
  	    必须严格按照操作系统的编程规范进行,不能随便
  	    任何编写代码
  主流的嵌入式操作系统：
  	linux
  	vxworks
  	wince
  	
  明确：计算机组成形式
  从硬件层面分析：由CPU和外设组成
  “外设”：不仅仅包括肉眼在开发板上看到的硬件设备
          还包括处理器内部集成的各种硬件控制器
  切记：CPU一天到晚都是在跟外设进行数据的通信！
  细分：以CPU通过UART访问BT外设(蓝牙)整个过程：
  访问过程如下：
  1.研究CPU核访问BT外设
  2.转移到研究CPU核访问BT对应的UART控制器
  3.转移到研究CPU核通过访问控制器对应的寄存器
    注意：这些集成的寄存器同样的外设！
  4.切记切记：CPU核访问外设都是以地址指针的形式访问即可
    也就代表只要搞清楚外设的基地址,即可软件编程访问这个
    外设；
    注意：如果搞不清楚基地址,咨询硬件工程师！
    
  5.总结：CPU核通过软件访问UART的寄存器,后序的访问都是
    硬件自动化完成！
  
  从软件层面上："CPU一天到晚,软件做什么事情呢"
  不是处理进程就是处理中断！
  
  面试题：谈谈进程和线程的区别
  
  案例：以DM9000网卡的访问为例：
  分析过程：
  1.掌控硬件信息：
    粗看："把玩"
        把握外设DM9000网卡芯片在开发板的位置(标签)
        可以用放大镜观察,观察芯片上方的型号！
        如果不清楚,问硬件工程师！
        结果：记住DM9000网卡在开发板上的标签(UT2)

    细看：
       1.打开原理图,根据标签在原理图上找到对应的位置
         马上建立一个CPU访问DM9000的连接图出来
       2.根据CPU和DM9000网卡的硬件连接图确认它们之间的
         通信方式，计算机硬件通信方式：
         1.GPIO通信,例如LED
           就是输入和输出操作
         2.UART通信,例如BT
           CPU只要访问UART控制器即可
         3.总线方式,有地址线和数据线
           只需搞定基地址即可,基地址由管脚CS(chip select)(=CE chip enable)
           来决定
           只要有了基地址,将来以地址指针的形式访问DM9000网卡
           即可,访问完全类似内存,需要额外配置相关的寄存器
           DM9000网卡的CS管脚连接到CPU的Xm0CSn1
           
           根据CPU的Xm0CSn1管脚确定DM9000网卡的基地址
           此时此刻打开CPU的芯片手册P29
           切记:Xm0CSn1对应的就是SROMC_BANK1
           最终确定：SROMC_BANK1的基地址为0x88000000
           也就是DM9000网卡的基地址为0x88000000
           将来访问DM9000网卡：
           *(unsigned long *)(0x880000000+地址偏移量) = 0x55；
           
           不会找的问硬件工程师
         
         4.I2C通信方式
         5.SPI通信方式
         6.1-Wire通信方式
           ...  
      3.根据不同的通信方式进行操作
        除了总线方式,其他都是访问控制器对应的寄存器即可！
    
    3.打开CPU的芯片手册查阅控制器对应的寄存器的使用
      关键找两点：
      寄存器的基地址
      寄存器的使用(每一个BIT的功能)
      当然还要结合DM9000网卡本身的芯片手册

**********************************************************
3.回顾Nand相关操作
  面试题：阐述Norflash和Nandflash的区别
  面试题：谈谈对UART的理解
  	  一定要画时序图,以CPU通过UART发送数据0x95为例,画出
  	  时序操作图,UART的配置信息：115200 8e1
  场景：CPU如何去读写Nand
  实施步骤：
  1.明确NandFlash的作用
    存储数据,类似硬盘
  2.掌控Nand的硬件信息
    粗看：
    	肉眼观察Nand的位置,找到Nand的标签
    	结论：
    	1.Nand型号：K9K8G08U0B
    	  注意：容量的单位(Byte,bit)
    	  8Gb = 1GB
    	2.标签MU1
   
    细看：
    	1.打开核心板的原理图,根据标签MU1找到连接图位置
    	2.掌控Nand的硬件连接
    	  Nand     S5PV210               功能
    	  IO0~IO7  Xm0DATA0~Xm0DATA7    用来传输数据
    	  nWE	   Xm0FWEn		写使能
    	  nRE	   Xm0FREn		读使能
    	  
    	  nCE1	   Xm0CSn2		使能芯片
    	  (chip enable=片选使能)  
    	  注意CE:由于CPU的8根数据线Xm0DATA0~Xm0DATA7即连接到
    	  DM9000网卡又连接到Nand,通过CE(CS)片选管脚来决定8根
    	  数据线上传输的数据给哪个芯片,例如：
    	  如果将Nand的CE拉低,表示使能Nand,8根数据线上传输的
    	  数据给Nand,同时DM9000网卡的CS管脚必然拉高(拉高可以认为
    	  这个DM9000网卡芯片没有焊接一样)
    	  
    	  R/#B0	  Xm0FRnB0		判断Nand是否准备就绪
    	  如果Nand准备就绪,R/B0为高电平
    	  如果Nand忙,R/B0为低电平
    	  
    	  注意：由于Nand采用GPIO接口,只有数据线,无地址线,所以
    	        CPU不能像访问内存一样,以地址指针的形式访问,
    	        没有地址线,怎么访问Nand的存储空间呢？
    	        答：没关系,Nand的访问操作只需三步骤即可：
    	        1.CPU先发命令
    	        2.CPU再发要访问的Nand存储空间的地址
    	        3.CPU最后发送(读取)要访问的数据
    	  	4.命令,地址,数据都要经过8根数据线进行传输
    	  	5.问：8根数据线如何区分到底传输的是命令,地址还是数据呢？
    	  	  答：通过CLE和ALE进行区分
    	  CLE:当CLE为高电平时,数据线上传输的命令
    	  ALE:当ALE为高电平时,数据线上传输的Nand芯片内部的存储空间地址
    	  当ALE和CLE都是低电平时,数据线上传输的数据
    	
    	3.慢慢品味Nand的芯片手册
    	  掌控Nand的硬件特性：
    	  1.存储容量1GB
    	  2.采用GPIO通信接口
    	  3.以页为单位，1页=2048B
    	    以块为单位, 1block=64个页
    	  4.存储空间地址的划分：
    	    行地址：页编号(第几个页)
    	    列地址：页内偏移
    	    注意：这些地址在访问的时候同样需要8根数据线传输
    	    
    	  例如：CPU想访问Nand片内8000这个存储空间对应的地址
    	  分析：
    	  1.首先换算8000这个地址对应的行地址和列地址
    	  2.明确地址换算出来以后,只能通过8根数据线上传输
    	  
    	  
    	  列地址：8000-2048*3=1856=0x740  Column Address
	  行地址：8000/2048=3=0x3         Row Address
    	  
    	  第一次：CPU发送0x740&0xff=0x40
    	  第二次：CPU发送(0x740>>8)&0x0f=0x7
    	  第三次：CPU发送0x3 & 0xff = 0x3
    	  第四次：CPU发送(0x3 >> 8)&0xff=0x00
    	  第五次：CPU发送(0x3 >> 16) & 0x07=0x00
    	  
    	  CPU通过8根数据线将地址发送给Nand,就等价于告诉nand
    	  ,我要访问你8000这个地址
    	  
       4.Nand的操作无非就是读,写,擦除
         CPU如何读,写,擦除这些操作,具体要参见Nand的操作时序图
         "时序图"：就是14根信号线的操作电平状态
         以CPU读取Nand ID信息为例,画出时序图P35
           
     4.最后品味S5PV210的芯片手册,只看Nand控制器相关的章节
       研究对象的转移：
       1.CPU操作Nand
       2.CPU操作14根信号线
       3.CPU操作控制器(控制器会帮你操作14根信号线)
       4.CPU操作控制器对应的寄存器
       5.打开CPU的芯片手册,掌握Nand控制器的寄存器的操作特性
         把握两点,P692：
         1.抓住寄存器的基地址,将来要以地址指针的形式访问
         2.抓住寄存器的操作功能

案例：编程实现CPU读取Nand ID信息,并且打印ID信息
       	  

