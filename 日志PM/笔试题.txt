一. 简述static的作用



二。谈谈进程和线程的区别

	进程就是一个应用程序在处理机上的一次执行过程，它是一个动态的概念，而线程是进程中的一部分，进程包含多个线程在运行。
	线程和进程的区别在于，子进程和父进程有不同的代码和数据空间，而多个线程则共享数据空间，每个线程有自己的执行堆栈和程序计数器为其执行上下文。多线程主要是为了节约CPU时间，发挥利用，根据具体情况而定。
	区别归纳：
	a。地址空间和其他资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。
	b。通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信――需要进程同步和互斥手段的辅助，以保证数据的一致性。
	c。调度和切换：线程上下文切换比进程上下文切换要快得多。
	d。在多线程OS中，进程不是一个可执行的实体。线程是进程的一个实体，是CPU调度和分派的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。



阐述Norflash和Nandflash的区别

		Norflash		Nandflash
特点		可在芯片内执行程序	在系统RAM中执行程序
		没有坏块			有坏块
接口		SRAM接口			I/O接口
传输效率		高			中
写入/擦除操作时间 5s			4ms
寿命		十万次			一百万次



三。面试题：谈谈对UART的理解
	异步串行收发器
  	  一定要画时序图,以CPU通过UART发送数据0x95为例,画出
  	  时序操作图,UART的配置信息：115200 8e1

四。阐述volatile的功能
	volatile影响编译器编译的结果，指出volatile变量时随时可能发生变化的，与volatile变量有关的运算，不要进行编译优化，以免出错，每次使用这个变量必须重新从该变量地址中读取数据。


五。struct Stu{
	char a;
	int b;
	char c;
    };
	请问：sizeof（struct Stu）= ？

六。编程验证大端模式还是小端模式？
	int n = 1;
	printf(*(char *)&n) ? "小端\n" : "大端\n");


七.strcpy
#include<stdio.h>
#include<stdlib.h>
char *mystrcpy(char *str)
{	
	char *p_tmp=str,*p_dest=NULL,*p_tmp1=NULL;
	int cnt=0;
	while(*p_tmp)
	{
		cnt++;			//先计算字符串的个数，为申请多少个动态内存做准备
		p_tmp++; //指针后移
	}
	cnt++;
	p_dest=(char*)malloc(cnt*sizeof(char));
	if(p_dest)
	{
		p_tmp=str;  //p_tmp指针和原有字符串第一个存储区捆绑
		p_tmp1=p_dest; //p_tmp1指针和动态分配内存第一个存储区捆绑
		while(*p_tmp)
		{
			*p_tmp1=*p_tmp;//拷贝一个字符
			p_tmp++;	//p_tmp指针和下一个存储区捆绑
			p_tmp1++;	//p_tmp1指针和下一个动态分配存储区捆绑
		}
		*p_tmp1=0;  // 在新字符串里加入'\0'字符
	}
	return p_dest;
}
int main()
{
	char *str=mystrcpy("abcdef");
	if(str)
	{
		printf("%s\n",str);
		free(str);
		str=NULL;
	}
	return 0;
}








